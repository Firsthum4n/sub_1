{"version":3,"sources":["app/app.module.scss","components/MainPage/index.module.scss","app/images/settings.svg","app/images/download.svg","app/images/upload.svg","app/images/audio.svg","app/images/video.svg","app/images/delete_icon.svg","app/images/mixedContent.svg","app/images/modal_close.svg","app/images/plus.svg","app/images/arrow.svg","components/AuthContext/index.ts","components/MainPage/MainPage.tsx","components/appMain/appMain.tsx","database/databaseConfig.js","database/tables.ts","database/dexieProvider.ts","database/index.ts","communicatorMethods/index.ts","models/Auth.ts","app/app.tsx","serviceWorker.ts","webpack:///./src/index.tsx?d986"],"names":["module","exports","AuthContext","React","createContext","isAdmin","MainPage","settings","auth","moment","locale","videoRef","useRef","videoSrc","video","length","src","videoRef1","videoSrc1","video1","useEffect","current","play","className","styles","testWrapper","ref","autoPlay","loop","muted","width","height","z-index","margin-left","naimenovanie2","naimenovanie3","naimenovanie4","naimenovanie5","naimenovanie6","logger","Logger","AppMain","widgetOptionsTemp","clientProvider","database","widgetOptions","setListeners","listenerType","listenerMethod","setDeviceId","clearListeners","window","getDeviceId","authContext","useMemo","obj","deviceId","log","style","id","Provider","value","Object","keys","DATABASE_CONFIG","TABLES","DexieProvider","databaseName","declare","version","numberVersion","Number","stores","open","this","Dexie","Database","_database","someGetMethod","name","method","callback","timeout","setTimeoutUser","listener","Auth","token","host","_token","_host","_deviceId","setDictionary","l10n","App","props","settingsIconRef","_frontendMessenger","_isNeedDownloadMedia","setWidgetOptionsTemp","options","setState","clearWidgetOptionsTemp","_setAuth","data","JSON","stringify","state","_initLocale","onLocaleChanged","widgetOptionsEditor","localisation","messageListener","message","indexOf","replace","bufferData","parse","onMediaLoaded","includes","parsed","onMessageForApp","_updateWidgetData","WidgetOptionsEditor","inEditMode","onWidgetOptionsUpdated","updatedData","isExist","forceUpdate","setLocale","type","setDatabase","requireDatabase","then","setCommunicator","requireCommunicator","clientCommunicator","ClientCommunicator","methods","provider","connect","isServicesReady","_isCommunicatorInitialized","warn","_isDatabaseInitialized","handleAuthenticationScreenOpen","prevState","isAuthenticationScreenOpen","handleAuthenticationScreenClose","onAuth","getAppStyle","styleName","tempSettings","isEmpty","undefined","Messenger","removeListener","appMainProps","process","REACT_APP_PIN_CODE","getQueryStringValue","app","fontSize","AppContext","edit","path","isNeedDownloadMedia","MainComponent","localeChanged","navButtonsText","applyButton","translate","resetButton","iconsList","download_icon","upload_icon","audio_icon","video_icon","delete_icon","mixed_content_icon","modal_close","plus_icon","arrow_icon","fields","label","settingsIcon","openEditorIcon","onClick","e","editStart","alt","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.0855360d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"edit\":\"app_edit__3TwkH\",\"openEditorIcon\":\"app_openEditorIcon__2-euB\",\"app\":\"app_app__3EESk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"testWrapper\":\"MainPage_testWrapper__2Ldt0\"};","module.exports = __webpack_public_path__ + \"static/media/settings.7c9f5af4.svg\";","module.exports = __webpack_public_path__ + \"static/media/download.1ab0e91c.svg\";","module.exports = __webpack_public_path__ + \"static/media/upload.75179563.svg\";","module.exports = __webpack_public_path__ + \"static/media/audio.48d9b56f.svg\";","module.exports = __webpack_public_path__ + \"static/media/video.78c8cbe4.svg\";","module.exports = __webpack_public_path__ + \"static/media/delete_icon.ceb3f725.svg\";","module.exports = __webpack_public_path__ + \"static/media/mixedContent.07787ab5.svg\";","module.exports = __webpack_public_path__ + \"static/media/modal_close.c5817d71.svg\";","module.exports = __webpack_public_path__ + \"static/media/plus.f1818abb.svg\";","module.exports = __webpack_public_path__ + \"static/media/arrow.8e299767.svg\";","import React from \"react\";\r\n\r\nconst defaultAuthContext = {\r\n    isAdmin: false\r\n}\r\n\r\nexport const AuthContext = React.createContext(defaultAuthContext)","import React, { useEffect, useRef, useState } from \"react\";\r\nimport styles from './index.module.scss';\r\nimport moment from \"moment\";\r\n\r\ntype Files = {\r\n    id: number\r\n    name: string\r\n    src: string\r\n    type: string\r\n}\r\n\r\nexport const MainPage = ({ settings, auth }: any) => {\r\n    moment.locale('ru')\r\n\r\n    const videoRef = useRef() as React.MutableRefObject<any>\r\n    const videoSrc = settings.video.length ? settings.video[0].src : ''\r\n\r\n    const videoRef1 = useRef() as React.MutableRefObject<any>\r\n    const videoSrc1 = settings.video1.length ? settings.video1[0].src : ''\r\n\r\n    useEffect(() => {\r\n        if (settings.video) {\r\n            videoRef.current && videoRef.current.play()\r\n        }\r\n        \r\n    },  settings.video)\r\n\r\n    useEffect(() => {\r\n        if (settings.video1) {\r\n            videoRef.current && videoRef.current.play()\r\n        }\r\n        \r\n    },settings.video1)\r\n    \r\n\r\n\r\n\r\n    return (\r\n        <div className={styles.testWrapper} >\r\n                <video\r\n                    ref={videoRef}\r\n                    autoPlay\r\n                    loop\r\n                    muted\r\n                    src={videoSrc}\r\n                    width='50%'\r\n                    height='100%'\r\n                    z-index='0'\r\n                    \r\n                    />\r\n                <video\r\n                    ref={videoRef1}\r\n                    autoPlay\r\n                    loop\r\n                    muted\r\n                    src={videoSrc1}\r\n                    width='50%'\r\n                    height='100%'\r\n                    margin-left=\"960px\"\r\n                    z-index='0'\r\n                    />\r\n                <aside>\r\n                    <ul>\r\n                        <li>{settings.naimenovanie2}</li>\r\n                        <li>{settings.naimenovanie3}</li>\r\n                        <li>{settings.naimenovanie4}</li>\r\n                        <li>{settings.naimenovanie5}</li>\r\n                        <li>{settings.naimenovanie6}</li>\r\n                    </ul>\r\n                </aside>\r\n            </div>\r\n\r\n\r\n        )\r\n    }\r\n\r\n","import React, {FunctionComponent, useEffect, useMemo} from 'react';\r\nimport {Auth} from \"../../models/Auth\";\r\nimport {DatabaseProvider} from \"../../database/databaseProvider\";\r\nimport {Logger} from \"sp_widget_core\";\r\nimport { AuthContext } from '../AuthContext';\r\nimport {MainPage} from \"../MainPage/MainPage\";\r\n\r\ninterface IAppMainComponent {\r\n    clientProvider?: any\r\n    database?: DatabaseProvider\r\n    auth?: Auth\r\n    widgetOptions?: any\r\n    isAdmin: boolean\r\n    widgetOptionsTemp: any\r\n}\r\n\r\nconst logger = Logger()\r\n\r\nconst AppMain: FunctionComponent<IAppMainComponent> = ({widgetOptionsTemp, clientProvider, database, auth, widgetOptions, isAdmin}) => {\r\n    useEffect(() => {\r\n        const subscribeToEvents = () => {\r\n            if (clientProvider) {\r\n                clientProvider.setListeners([\r\n                    {listenerType: \"setDeviceId\", listenerMethod: setDeviceId}\r\n                ])\r\n            }\r\n        }\r\n        subscribeToEvents()\r\n\r\n        return () => {\r\n            if (clientProvider) {\r\n                clientProvider.clearListeners()\r\n            }\r\n        }\r\n    }, [clientProvider])\r\n\r\n    useEffect(() => {\r\n        if('getDeviceId' in window){\r\n            window.getDeviceId()\r\n        }\r\n    }, [])\r\n\r\n    const authContext = useMemo(() => {\r\n        return {\r\n            isAdmin\r\n        }\r\n    }, [isAdmin])\r\n\r\n    if (!clientProvider) {\r\n        return null\r\n    }\r\n\r\n    const setDeviceId = (deviceId: string) => {\r\n        logger.log(`set device id: ${deviceId}`)\r\n        window.deviceId = deviceId\r\n    }\r\n\r\n    const isEmpty = (obj: {}) => {\r\n        return Object.keys(obj).length === 0;\r\n    }\r\n\r\n    return (\r\n        <div style={{height: '100%'}} id={'appMain'}>\r\n            <AuthContext.Provider value={authContext}>\r\n                <MainPage\r\n                    auth={auth}\r\n                    settings={!isEmpty(widgetOptionsTemp) ? widgetOptionsTemp : widgetOptions.settings}\r\n                />\r\n            </AuthContext.Provider>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport {AppMain}\r\n","export const DATABASE_CONFIG = {\r\n    NAME: 'my_database_name'\r\n}\r\n","export const TABLES = {\r\n    TABLE_NAME: 'table_name'\r\n}","import Dexie from 'dexie/dist/dexie.js'\r\nimport {TABLES} from './tables'\r\nimport {DatabaseProvider} from \"./databaseProvider\";\r\n\r\nclass DexieProvider implements DatabaseProvider {\r\n    database: Dexie\r\n\r\n    constructor(databaseName: string) {\r\n        this.database = new Dexie(databaseName)\r\n    }\r\n\r\n    declare = (version: string | number) => {\r\n        const numberVersion = Number(version)\r\n        this.database.version(numberVersion).stores({\r\n            [TABLES.TABLE_NAME]: 'id, data'\r\n        });\r\n    }\r\n\r\n    open = (databaseName?: string) => {\r\n        return this.database.open()\r\n    }\r\n}\r\n\r\nexport {DexieProvider}","import {DexieProvider} from \"./dexieProvider\";\r\nimport {DatabaseProvider} from \"./databaseProvider\";\r\n\r\nclass Database {\r\n    private _database: DatabaseProvider\r\n\r\n    constructor(databaseName: string) {\r\n        this._database = new DexieProvider(databaseName)\r\n    }\r\n\r\n    declare = (version: string | number) => {\r\n        this._database.declare(version)\r\n    }\r\n\r\n    open = (databaseName?: string): Promise<any> => {\r\n        return this._database.open(databaseName)\r\n    }\r\n\r\n    someGetMethod = () => {\r\n        return []\r\n    }\r\n}\r\n\r\nexport {Database}","export default [\r\n    {name: 'getAuthorization', method: 'getAuthorization'},\r\n    {name: 'setTimeoutUser', method: 'setTimeoutUser', callback: (timeout: number): void => {\r\n            window.setTimeoutUser(timeout)\r\n        }},\r\n    {name: 'timeoutCallback', listener: true},\r\n    {name: 'getDeviceId'},\r\n    {name: 'setDeviceId', listener: true},\r\n    {name: 'getDeviceHost'}\r\n]","export class Auth {\r\n    private _token: string\r\n    private _host: string\r\n    private _deviceId: string\r\n\r\n    constructor(token: string, host: string, deviceId: string) {\r\n        this._token = token;\r\n        this._host = host;\r\n        this._deviceId = deviceId;\r\n    }\r\n}","import React from 'react'\r\nimport { AppMain } from \"../components/appMain/appMain\";\r\nimport { Logger, ClientCommunicator, Messenger, translate, setLocale, setDictionary, isExist } from \"sp_widget_core\";\r\nimport { DATABASE_CONFIG } from \"../database/databaseConfig\";\r\nimport { Database } from \"../database\";\r\nimport methods from '../communicatorMethods'\r\nimport styles from './app.module.scss'\r\nimport { Auth } from '../models/Auth';\r\nimport { Localisation } from \"../models/localisation\";\r\nimport { MediaFileData } from '../models/MediaFileData';\r\nimport { WidgetEditor, WidgetOptionsEditor, getQueryStringValue } from 'sp_widget_editor'\r\nimport settingsIcon from './images/settings.svg'\r\nimport download_icon from './images/download.svg'\r\nimport upload_icon from './images/upload.svg'\r\nimport audio_icon from './images/audio.svg'\r\nimport video_icon from './images/video.svg'\r\nimport delete_icon from './images/delete_icon.svg'\r\nimport mixed_content_icon from './images/mixedContent.svg'\r\nimport modal_close from './images/modal_close.svg'\r\nimport plus_icon from './images/plus.svg'\r\nimport arrow_icon from './images/arrow.svg'\r\n\r\nimport l10n from '../dictionary/l10n.json'\r\nsetDictionary(l10n)\r\n\r\ninterface IAppProps {\r\n    requireDatabase?: boolean\r\n    requireCommunicator?: boolean\r\n}\r\n\r\ninterface IAppState {\r\n    database?: Database,\r\n    clientCommunicator?: any\r\n    isAdmin: boolean\r\n    auth?: Auth\r\n    widgetOptionsEditor: WidgetOptionsEditor\r\n    isAuthenticationScreenOpen: boolean\r\n    widgetOptionsTemp: any\r\n}\r\n\r\nconst logger = Logger()\r\n\r\nclass App extends React.Component<IAppProps, IAppState> {\r\n    settingsIconRef: any\r\n    private _frontendMessenger: any\r\n    private _isNeedDownloadMedia = true\r\n\r\n    constructor(props: IAppProps) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            database: undefined,\r\n            clientCommunicator: undefined,\r\n            auth: undefined,\r\n            isAdmin: false,\r\n            widgetOptionsEditor: new WidgetOptionsEditor(window['petrovich']),\r\n            isAuthenticationScreenOpen: false,\r\n            widgetOptionsTemp: {}\r\n        }\r\n\r\n        this._frontendMessenger = Messenger(this.messageListener)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this._initLocale()\r\n        this.setCommunicator()\r\n        this.setDatabase()\r\n    }\r\n\r\n    componentWillUnmount(): void {\r\n        this._frontendMessenger.removeListener()\r\n    }\r\n\r\n    setWidgetOptionsTemp = (options: any) => {\r\n        this.setState({ widgetOptionsTemp: options })\r\n    }\r\n\r\n    clearWidgetOptionsTemp = () => {\r\n        this.setState({ widgetOptionsTemp: {} })\r\n    }\r\n\r\n    _setAuth = (data: any) => {\r\n        logger.log(`Setting authorization ${JSON.stringify(data)}`)\r\n\r\n        const { token, host, deviceId } = data\r\n        this.setState(state => ({\r\n            ...state,\r\n            auth: new Auth(token, host, deviceId)\r\n        }))\r\n    }\r\n\r\n    private _initLocale = () => {\r\n        this.onLocaleChanged(this.state.widgetOptionsEditor.data.settings.localisation)\r\n    }\r\n\r\n    messageListener = (message: any) => {\r\n        logger.log(`App#frontendMessageListener. ${message.data}`)\r\n\r\n        let data: any = message.data\r\n        if (typeof data !== 'string') {\r\n            return\r\n        }\r\n\r\n        if (data.indexOf('selectMedia__') === 0) {\r\n            data = data.replace('selectMedia__', '')\r\n            const bufferData: MediaFileData = JSON.parse(data)\r\n            this.state.widgetOptionsEditor.onMediaLoaded(bufferData)\r\n        }\r\n\r\n        if (data.indexOf('selectMediaWithFolders__') === 0) {\r\n            data = data.replace('selectMediaWithFolders__', '')\r\n            const bufferData: any = JSON.parse(data)\r\n            this.state.widgetOptionsEditor.onMediaLoaded(bufferData)\r\n        }\r\n\r\n        if (data.includes('authorization')) {\r\n            data = data.replace('authorization__', '')\r\n            const parsed = JSON.parse(data)\r\n            this.onMessageForApp('authorization', parsed)\r\n        }\r\n\r\n        if (data.includes('listenerDataUpdated')) {\r\n            data = data.replace('listenerDataUpdated__', '')\r\n            this.onMessageForApp('listenerDataUpdated', data)\r\n        }\r\n\r\n        if (data.includes('listenerDataDeleted')) {\r\n            data = data.replace('listenerDataDeleted__', '')\r\n            this.onMessageForApp('listenerDataDeleted', data)\r\n        }\r\n\r\n        if (data.includes('settings__')) {\r\n            data = data.replace('settings__', '')\r\n            data = JSON.parse(data)\r\n            this._updateWidgetData(data)\r\n        }\r\n    }\r\n\r\n    private _updateWidgetData = (data: any) => {\r\n        const widgetOptionsEditor = this.state.widgetOptionsEditor\r\n\r\n        this.setState(state => ({\r\n            ...state,\r\n            widgetOptionsEditor: new WidgetOptionsEditor(\r\n                {\r\n                    ...widgetOptionsEditor.data,\r\n                    ...data\r\n                },\r\n                widgetOptionsEditor.inEditMode\r\n            )\r\n        }))\r\n    }\r\n\r\n    onWidgetOptionsUpdated = (updatedData: any) => {\r\n        if (isExist(updatedData)) {\r\n            this._updateWidgetData(updatedData)\r\n        } else {\r\n            // TODO: remove it after reworking widgetEditor.add method\r\n            this.forceUpdate()\r\n        }\r\n    }\r\n\r\n    onLocaleChanged = (locale: Localisation) => {\r\n        setLocale(locale)\r\n        this.forceUpdate()\r\n    }\r\n\r\n    onMessageForApp = (type: string, data: any) => {\r\n        logger.log(`App#onMessageForApp. type:${type}. data: ${JSON.stringify(data)}`)\r\n        if (type === 'authorization') {\r\n            this._setAuth(data)\r\n        }\r\n\r\n        if (type === 'closeModal') {\r\n\r\n        }\r\n    }\r\n\r\n    setDatabase = () => {\r\n        if (this.props.requireDatabase) {\r\n            const database = new Database(DATABASE_CONFIG.NAME)\r\n\r\n            database.declare(1)\r\n            database.open()\r\n                .then(() => {\r\n                    logger.log(`Database was opened`)\r\n                    this.setState(state => ({\r\n                        ...state,\r\n                        database\r\n                    })\r\n                    )\r\n                })\r\n        }\r\n\r\n    }\r\n\r\n    setCommunicator = () => {\r\n        if (this.props.requireCommunicator) {\r\n            const clientCommunicator = ClientCommunicator(methods)\r\n\r\n            if (clientCommunicator.provider) {\r\n                clientCommunicator.connect()\r\n                    .then(() => {\r\n                        logger.log(`Client communicator was opened`)\r\n                        this.setState({\r\n                            clientCommunicator\r\n                        })\r\n                    })\r\n            }\r\n        }\r\n    }\r\n\r\n    isServicesReady = () => {\r\n        const { requireCommunicator, requireDatabase } = this.props\r\n\r\n        if (requireCommunicator && !this._isCommunicatorInitialized()) {\r\n            logger.warn(`Client communicator required`)\r\n            return false\r\n        }\r\n\r\n        if (requireDatabase && !this._isDatabaseInitialized()) {\r\n            logger.warn(`Database required`)\r\n            return false\r\n        }\r\n\r\n        return true\r\n    }\r\n\r\n    _isDatabaseInitialized = () => {\r\n        return !!this.state.database\r\n    }\r\n\r\n    _isCommunicatorInitialized = () => {\r\n        const { clientCommunicator } = this.state\r\n        return !!(clientCommunicator && clientCommunicator.provider)\r\n    }\r\n\r\n    handleAuthenticationScreenOpen = () => {\r\n        this.setState((prevState) => {\r\n            return {\r\n                ...prevState,\r\n                isAuthenticationScreenOpen: true\r\n            }\r\n        })\r\n    }\r\n\r\n    handleAuthenticationScreenClose = () => {\r\n        this.setState((prevState) => {\r\n            return {\r\n                ...prevState,\r\n                isAuthenticationScreenOpen: false\r\n            }\r\n        })\r\n    }\r\n\r\n    onAuth = () => {\r\n        this.setState((prevState) => ({ isAdmin: true }))\r\n    }\r\n\r\n    isEmpty(obj: {}) {\r\n        return Object.keys(obj).length === 0;\r\n    }\r\n\r\n    getAppStyle = (styleName: string) => {\r\n        const settings = this.state.widgetOptionsEditor.data.settings\r\n        const tempSettings = this.state.widgetOptionsTemp\r\n        const styleValue = !this.isEmpty(tempSettings) ? tempSettings[styleName] : settings[styleName]\r\n\r\n        return styleValue || null\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            isAdmin,\r\n            auth,\r\n            database,\r\n            clientCommunicator,\r\n            widgetOptionsEditor,\r\n            isAuthenticationScreenOpen\r\n        } = this.state\r\n        const isServicesReady = this.isServicesReady()\r\n        const isShowAuthenticationScreen = !isAdmin && process.env.REACT_APP_PIN_CODE && getQueryStringValue()\r\n        const appMainProps = {\r\n            clientProvider: clientCommunicator?.provider,\r\n            widgetOptions: widgetOptionsEditor.data,\r\n            widgetOptionsTemp: this.state.widgetOptionsTemp,\r\n            database,\r\n            auth,\r\n            isAdmin\r\n        }\r\n\r\n        if (!isServicesReady) {\r\n            return null\r\n        }\r\n\r\n        return (\r\n            <div className={styles.app} style={\r\n                {\r\n                    fontSize: `${this.getAppStyle('widgetFontSize')}px`\r\n                }\r\n            }>\r\n                <AppContext.Provider value={{\r\n                    onLocaleChanged: this.onLocaleChanged,\r\n                }}>\r\n                    <AppMain\r\n                        {...appMainProps}\r\n                    />\r\n                    {getQueryStringValue() &&\r\n                        <div\r\n                            className={styles.edit}\r\n                        >\r\n                            <WidgetEditor\r\n                                path=\"settings\"\r\n                                isNeedDownloadMedia={this._isNeedDownloadMedia}\r\n                                widgetOptionsEditor={widgetOptionsEditor}\r\n                                onMessageForApp={this.onMessageForApp}\r\n                                onWidgetOptionsUpdated={this.onWidgetOptionsUpdated}\r\n                                ref={settingsIconRef => this.settingsIconRef = settingsIconRef}\r\n                                //@ts-ignore\r\n                                MainComponent={AppMain}\r\n                                appMainProps={appMainProps}\r\n                                setWidgetOptionsTemp={this.setWidgetOptionsTemp}\r\n                                clearWidgetOptionsTemp={this.clearWidgetOptionsTemp}\r\n                                localeChanged={this.onLocaleChanged}\r\n                                navButtonsText={{ applyButton: translate('saveSettings'), resetButton: translate('reset') }}\r\n                                iconsList={{\r\n                                    download_icon,\r\n                                    upload_icon,\r\n                                    audio_icon,\r\n                                    video_icon,\r\n                                    delete_icon,\r\n                                    mixed_content_icon,\r\n                                    modal_close,\r\n                                    plus_icon,\r\n                                    arrow_icon\r\n                                }}\r\n\r\n                                settings={[\r\n                                    {\r\n                                        name: translate('settings'),\r\n                                        fields: [\r\n                                            {\r\n                                                label: translate('selectLanguage'),\r\n                                                name: 'localisation',\r\n                                                type: 'localisation'\r\n                                            }, \r\n                                            {\r\n                                                name: 'video',\r\n                                                label: translate('video'),\r\n                                                type: 'video'\r\n                                            },\r\n                                            {\r\n                                                name: 'video1',\r\n                                                label: translate('video'),\r\n                                                type: 'video'\r\n                                            },\r\n                                            {\r\n                                                name: 'naimenovanie1',\r\n                                                label: 'naimenovanie1',\r\n                                            },\r\n                                            {\r\n                                                name: 'naimenovanie2',\r\n                                                label: 'naimenovanie2',\r\n                                            },\r\n                                            {\r\n                                                name: 'naimenovanie3',\r\n                                                label: 'naimenovanie3',\r\n                                            },\r\n                                            {\r\n                                                name: 'naimenovanie4',\r\n                                                label: 'naimenovanie4',\r\n                                            },\r\n                                            {\r\n                                                name: 'naimenovanie5',\r\n                                                label: 'naimenovanie5',\r\n                                            },\r\n                                            {\r\n                                                name: 'naimenovanie6',\r\n                                                label: 'naimenovanie6',\r\n                                            }\r\n                                        ]\r\n                                    },\r\n                                ]}\r\n                            >\r\n                                <img\r\n                                    src={settingsIcon}\r\n                                    className={styles.openEditorIcon}\r\n                                    onClick={(e) => {\r\n                                        this.settingsIconRef.editStart(e);\r\n                                    }}\r\n                                    width={120}\r\n                                    height={120}\r\n                                    alt=\"\"\r\n                                />\r\n                            </WidgetEditor>\r\n                        </div>\r\n                    }\r\n                </AppContext.Provider>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\ntype AppContextType = {\r\n    onLocaleChanged: (locale: Localisation) => void\r\n}\r\n\r\nexport const AppContext = React.createContext<AppContextType>({\r\n    onLocaleChanged: () => {\r\n\r\n    }\r\n})\r\n\r\nexport { App }\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import 'whatwg-fetch'\r\nimport 'core-js'\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {App} from './app/app';\r\n\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(\r\n    <App\r\n        requireCommunicator\r\n    />,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}