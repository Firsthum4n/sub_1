{"version":3,"sources":["app/app.module.scss","components/MainPage/index.module.scss","app/images/settings.svg","app/images/download.svg","app/images/upload.svg","app/images/audio.svg","app/images/video.svg","app/images/delete_icon.svg","app/images/mixedContent.svg","app/images/modal_close.svg","app/images/plus.svg","app/images/arrow.svg","components/AuthContext/index.ts","components/MainPage/MainPage.tsx","components/appMain/appMain.tsx","database/databaseConfig.js","database/tables.ts","database/dexieProvider.ts","database/index.ts","communicatorMethods/index.ts","models/Auth.ts","app/app.tsx","serviceWorker.ts","webpack:///./src/index.tsx?d986"],"names":["module","exports","AuthContext","React","createContext","isAdmin","MainPage","settings","auth","moment","locale","videoRef","useRef","videoSrc","video","length","src","videoRef1","videoSrc1","video1","useEffect","current","play","className","styles","testWrapper","ref","autoPlay","loop","muted","width","height","margin-left","naimenovanie1","naimenovanie2","naimenovanie3","naimenovanie4","naimenovanie5","naimenovanie6","logger","Logger","AppMain","widgetOptionsTemp","clientProvider","database","widgetOptions","setListeners","listenerType","listenerMethod","setDeviceId","clearListeners","window","getDeviceId","authContext","useMemo","obj","deviceId","log","style","id","Provider","value","Object","keys","DATABASE_CONFIG","TABLES","DexieProvider","databaseName","declare","version","numberVersion","Number","stores","open","this","Dexie","Database","_database","someGetMethod","name","method","callback","timeout","setTimeoutUser","listener","Auth","token","host","_token","_host","_deviceId","setDictionary","l10n","App","props","settingsIconRef","_frontendMessenger","_isNeedDownloadMedia","setWidgetOptionsTemp","options","setState","clearWidgetOptionsTemp","_setAuth","data","JSON","stringify","state","_initLocale","onLocaleChanged","widgetOptionsEditor","localisation","messageListener","message","indexOf","replace","bufferData","parse","onMediaLoaded","includes","parsed","onMessageForApp","_updateWidgetData","WidgetOptionsEditor","inEditMode","onWidgetOptionsUpdated","updatedData","isExist","forceUpdate","setLocale","type","setDatabase","requireDatabase","then","setCommunicator","requireCommunicator","clientCommunicator","ClientCommunicator","methods","provider","connect","isServicesReady","_isCommunicatorInitialized","warn","_isDatabaseInitialized","handleAuthenticationScreenOpen","prevState","isAuthenticationScreenOpen","handleAuthenticationScreenClose","onAuth","getAppStyle","styleName","tempSettings","isEmpty","undefined","Messenger","removeListener","appMainProps","process","REACT_APP_PIN_CODE","getQueryStringValue","app","fontSize","AppContext","edit","path","isNeedDownloadMedia","MainComponent","localeChanged","navButtonsText","applyButton","translate","resetButton","iconsList","download_icon","upload_icon","audio_icon","video_icon","delete_icon","mixed_content_icon","modal_close","plus_icon","arrow_icon","fields","label","settingsIcon","openEditorIcon","onClick","e","editStart","alt","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.85e8bcf0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"edit\":\"app_edit__30s-q\",\"openEditorIcon\":\"app_openEditorIcon__17WMk\",\"app\":\"app_app__3ln05\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"testWrapper\":\"MainPage_testWrapper__3QHph\",\"leftBodyrDiv\":\"MainPage_leftBodyrDiv__1trzJ\",\"leftHeaderDiv\":\"MainPage_leftHeaderDiv__k6CCO\",\"rightHeaderDiv\":\"MainPage_rightHeaderDiv__3BHgW\",\"rightBodyrDiv\":\"MainPage_rightBodyrDiv__1iJME\"};","module.exports = __webpack_public_path__ + \"static/media/settings.93afa2cf.svg\";","module.exports = __webpack_public_path__ + \"static/media/download.94328baa.svg\";","module.exports = __webpack_public_path__ + \"static/media/upload.962cdd77.svg\";","module.exports = __webpack_public_path__ + \"static/media/audio.ece0b3e5.svg\";","module.exports = __webpack_public_path__ + \"static/media/video.167f2535.svg\";","module.exports = __webpack_public_path__ + \"static/media/delete_icon.06df44b3.svg\";","module.exports = __webpack_public_path__ + \"static/media/mixedContent.f19a1110.svg\";","module.exports = __webpack_public_path__ + \"static/media/modal_close.65f6bff1.svg\";","module.exports = __webpack_public_path__ + \"static/media/plus.8432c077.svg\";","module.exports = __webpack_public_path__ + \"static/media/arrow.1852db14.svg\";","import React from \"react\";\n\nconst defaultAuthContext = {\n    isAdmin: false\n}\n\nexport const AuthContext = React.createContext(defaultAuthContext)","import React, { useEffect, useRef, useState } from \"react\";\nimport styles from './index.module.scss';\nimport moment from \"moment\";\n\ntype Files = {\n    id: number\n    name: string\n    src: string\n    type: string\n}\n\nexport const MainPage = ({ settings, auth }: any) => {\n    moment.locale('ru')\n\n    const videoRef = useRef() as React.MutableRefObject<any>\n    const videoSrc = settings.video.length ? settings.video[0].src : ''\n\n    const videoRef1 = useRef() as React.MutableRefObject<any>\n    const videoSrc1 = settings.video1.length ? settings.video1[0].src : ''\n\n    useEffect(() => {\n        if (settings.video) {\n            videoRef.current && videoRef.current.play()\n        }\n        \n    },  settings.video)\n\n    useEffect(() => {\n        if (settings.video1) {\n            videoRef.current && videoRef.current.play()\n        }\n        \n    },settings.video1)\n\n\n    return (\n        <div className={styles.testWrapper} >\n                <video\n                    ref={videoRef}\n                    autoPlay\n                    loop\n                    muted\n                    src={videoSrc}\n                    width='50%'\n                    height='100%'\n                    />\n                <video\n                    ref={videoRef1}\n                    autoPlay\n                    loop\n                    muted\n                    src={videoSrc1}\n                    width='50%'\n                    height='100%'\n                    margin-left=\"960px\"\n                    />\n                <aside>\n                    <ul>\n                        <h1>{settings.naimenovanie1}</h1>\n                        <h1>{settings.naimenovanie2}</h1>\n                        <h1>{settings.naimenovanie3}</h1>\n                        <h1>{settings.naimenovanie4}</h1>\n                        <h1>{settings.naimenovanie5}</h1>\n                        <h1>{settings.naimenovanie6}</h1>\n                    </ul>\n        \n                </aside>\n            </div>\n\n\n        )\n    }\n\n","import React, {FunctionComponent, useEffect, useMemo} from 'react';\nimport {Auth} from \"../../models/Auth\";\nimport {DatabaseProvider} from \"../../database/databaseProvider\";\nimport {Logger} from \"sp_widget_core\";\nimport { AuthContext } from '../AuthContext';\nimport {MainPage} from \"../MainPage/MainPage\";\n\ninterface IAppMainComponent {\n    clientProvider?: any\n    database?: DatabaseProvider\n    auth?: Auth\n    widgetOptions?: any\n    isAdmin: boolean\n    widgetOptionsTemp: any\n}\n\nconst logger = Logger()\n\nconst AppMain: FunctionComponent<IAppMainComponent> = ({widgetOptionsTemp, clientProvider, database, auth, widgetOptions, isAdmin}) => {\n    useEffect(() => {\n        const subscribeToEvents = () => {\n            if (clientProvider) {\n                clientProvider.setListeners([\n                    {listenerType: \"setDeviceId\", listenerMethod: setDeviceId}\n                ])\n            }\n        }\n        subscribeToEvents()\n\n        return () => {\n            if (clientProvider) {\n                clientProvider.clearListeners()\n            }\n        }\n    }, [clientProvider])\n\n    useEffect(() => {\n        if('getDeviceId' in window){\n            window.getDeviceId()\n        }\n    }, [])\n\n    const authContext = useMemo(() => {\n        return {\n            isAdmin\n        }\n    }, [isAdmin])\n\n    if (!clientProvider) {\n        return null\n    }\n\n    const setDeviceId = (deviceId: string) => {\n        logger.log(`set device id: ${deviceId}`)\n        window.deviceId = deviceId\n    }\n\n    const isEmpty = (obj: {}) => {\n        return Object.keys(obj).length === 0;\n    }\n\n    return (\n        <div style={{height: '100%'}} id={'appMain'}>\n            <AuthContext.Provider value={authContext}>\n                <MainPage\n                    auth={auth}\n                    settings={!isEmpty(widgetOptionsTemp) ? widgetOptionsTemp : widgetOptions.settings}\n                />\n            </AuthContext.Provider>\n        </div>\n    );\n};\n\nexport {AppMain}\n","export const DATABASE_CONFIG = {\n    NAME: 'my_database_name'\n}\n","export const TABLES = {\n    TABLE_NAME: 'table_name'\n}","import Dexie from 'dexie/dist/dexie.js'\nimport {TABLES} from './tables'\nimport {DatabaseProvider} from \"./databaseProvider\";\n\nclass DexieProvider implements DatabaseProvider {\n    database: Dexie\n\n    constructor(databaseName: string) {\n        this.database = new Dexie(databaseName)\n    }\n\n    declare = (version: string | number) => {\n        const numberVersion = Number(version)\n        this.database.version(numberVersion).stores({\n            [TABLES.TABLE_NAME]: 'id, data'\n        });\n    }\n\n    open = (databaseName?: string) => {\n        return this.database.open()\n    }\n}\n\nexport {DexieProvider}","import {DexieProvider} from \"./dexieProvider\";\nimport {DatabaseProvider} from \"./databaseProvider\";\n\nclass Database {\n    private _database: DatabaseProvider\n\n    constructor(databaseName: string) {\n        this._database = new DexieProvider(databaseName)\n    }\n\n    declare = (version: string | number) => {\n        this._database.declare(version)\n    }\n\n    open = (databaseName?: string): Promise<any> => {\n        return this._database.open(databaseName)\n    }\n\n    someGetMethod = () => {\n        return []\n    }\n}\n\nexport {Database}","export default [\n    {name: 'getAuthorization', method: 'getAuthorization'},\n    {name: 'setTimeoutUser', method: 'setTimeoutUser', callback: (timeout: number): void => {\n            window.setTimeoutUser(timeout)\n        }},\n    {name: 'timeoutCallback', listener: true},\n    {name: 'getDeviceId'},\n    {name: 'setDeviceId', listener: true},\n    {name: 'getDeviceHost'}\n]","export class Auth {\n    private _token: string\n    private _host: string\n    private _deviceId: string\n\n    constructor(token: string, host: string, deviceId: string) {\n        this._token = token;\n        this._host = host;\n        this._deviceId = deviceId;\n    }\n}","import React from 'react'\nimport { AppMain } from \"../components/appMain/appMain\";\nimport { Logger, ClientCommunicator, Messenger, translate, setLocale, setDictionary, isExist } from \"sp_widget_core\";\nimport { DATABASE_CONFIG } from \"../database/databaseConfig\";\nimport { Database } from \"../database\";\nimport methods from '../communicatorMethods'\nimport styles from './app.module.scss'\nimport { Auth } from '../models/Auth';\nimport { Localisation } from \"../models/localisation\";\nimport { MediaFileData } from '../models/MediaFileData';\nimport { WidgetEditor, WidgetOptionsEditor, getQueryStringValue } from 'sp_widget_editor'\nimport settingsIcon from './images/settings.svg'\nimport download_icon from './images/download.svg'\nimport upload_icon from './images/upload.svg'\nimport audio_icon from './images/audio.svg'\nimport video_icon from './images/video.svg'\nimport delete_icon from './images/delete_icon.svg'\nimport mixed_content_icon from './images/mixedContent.svg'\nimport modal_close from './images/modal_close.svg'\nimport plus_icon from './images/plus.svg'\nimport arrow_icon from './images/arrow.svg'\n\nimport l10n from '../dictionary/l10n.json'\nsetDictionary(l10n)\n\ninterface IAppProps {\n    requireDatabase?: boolean\n    requireCommunicator?: boolean\n}\n\ninterface IAppState {\n    database?: Database,\n    clientCommunicator?: any\n    isAdmin: boolean\n    auth?: Auth\n    widgetOptionsEditor: WidgetOptionsEditor\n    isAuthenticationScreenOpen: boolean\n    widgetOptionsTemp: any\n}\n\nconst logger = Logger()\n\nclass App extends React.Component<IAppProps, IAppState> {\n    settingsIconRef: any\n    private _frontendMessenger: any\n    private _isNeedDownloadMedia = true\n\n    constructor(props: IAppProps) {\n        super(props)\n\n        this.state = {\n            database: undefined,\n            clientCommunicator: undefined,\n            auth: undefined,\n            isAdmin: false,\n            widgetOptionsEditor: new WidgetOptionsEditor(window['petrovich']),\n            isAuthenticationScreenOpen: false,\n            widgetOptionsTemp: {}\n        }\n\n        this._frontendMessenger = Messenger(this.messageListener)\n    }\n\n    componentDidMount() {\n        this._initLocale()\n        this.setCommunicator()\n        this.setDatabase()\n    }\n\n    componentWillUnmount(): void {\n        this._frontendMessenger.removeListener()\n    }\n\n    setWidgetOptionsTemp = (options: any) => {\n        this.setState({ widgetOptionsTemp: options })\n    }\n\n    clearWidgetOptionsTemp = () => {\n        this.setState({ widgetOptionsTemp: {} })\n    }\n\n    _setAuth = (data: any) => {\n        logger.log(`Setting authorization ${JSON.stringify(data)}`)\n\n        const { token, host, deviceId } = data\n        this.setState(state => ({\n            ...state,\n            auth: new Auth(token, host, deviceId)\n        }))\n    }\n\n    private _initLocale = () => {\n        this.onLocaleChanged(this.state.widgetOptionsEditor.data.settings.localisation)\n    }\n\n    messageListener = (message: any) => {\n        logger.log(`App#frontendMessageListener. ${message.data}`)\n\n        let data: any = message.data\n        if (typeof data !== 'string') {\n            return\n        }\n\n        if (data.indexOf('selectMedia__') === 0) {\n            data = data.replace('selectMedia__', '')\n            const bufferData: MediaFileData = JSON.parse(data)\n            this.state.widgetOptionsEditor.onMediaLoaded(bufferData)\n        }\n\n        if (data.indexOf('selectMediaWithFolders__') === 0) {\n            data = data.replace('selectMediaWithFolders__', '')\n            const bufferData: any = JSON.parse(data)\n            this.state.widgetOptionsEditor.onMediaLoaded(bufferData)\n        }\n\n        if (data.includes('authorization')) {\n            data = data.replace('authorization__', '')\n            const parsed = JSON.parse(data)\n            this.onMessageForApp('authorization', parsed)\n        }\n\n        if (data.includes('listenerDataUpdated')) {\n            data = data.replace('listenerDataUpdated__', '')\n            this.onMessageForApp('listenerDataUpdated', data)\n        }\n\n        if (data.includes('listenerDataDeleted')) {\n            data = data.replace('listenerDataDeleted__', '')\n            this.onMessageForApp('listenerDataDeleted', data)\n        }\n\n        if (data.includes('settings__')) {\n            data = data.replace('settings__', '')\n            data = JSON.parse(data)\n            this._updateWidgetData(data)\n        }\n    }\n\n    private _updateWidgetData = (data: any) => {\n        const widgetOptionsEditor = this.state.widgetOptionsEditor\n\n        this.setState(state => ({\n            ...state,\n            widgetOptionsEditor: new WidgetOptionsEditor(\n                {\n                    ...widgetOptionsEditor.data,\n                    ...data\n                },\n                widgetOptionsEditor.inEditMode\n            )\n        }))\n    }\n\n    onWidgetOptionsUpdated = (updatedData: any) => {\n        if (isExist(updatedData)) {\n            this._updateWidgetData(updatedData)\n        } else {\n            // TODO: remove it after reworking widgetEditor.add method\n            this.forceUpdate()\n        }\n    }\n\n    onLocaleChanged = (locale: Localisation) => {\n        setLocale(locale)\n        this.forceUpdate()\n    }\n\n    onMessageForApp = (type: string, data: any) => {\n        logger.log(`App#onMessageForApp. type:${type}. data: ${JSON.stringify(data)}`)\n        if (type === 'authorization') {\n            this._setAuth(data)\n        }\n\n        if (type === 'closeModal') {\n\n        }\n    }\n\n    setDatabase = () => {\n        if (this.props.requireDatabase) {\n            const database = new Database(DATABASE_CONFIG.NAME)\n\n            database.declare(1)\n            database.open()\n                .then(() => {\n                    logger.log(`Database was opened`)\n                    this.setState(state => ({\n                        ...state,\n                        database\n                    })\n                    )\n                })\n        }\n\n    }\n\n    setCommunicator = () => {\n        if (this.props.requireCommunicator) {\n            const clientCommunicator = ClientCommunicator(methods)\n\n            if (clientCommunicator.provider) {\n                clientCommunicator.connect()\n                    .then(() => {\n                        logger.log(`Client communicator was opened`)\n                        this.setState({\n                            clientCommunicator\n                        })\n                    })\n            }\n        }\n    }\n\n    isServicesReady = () => {\n        const { requireCommunicator, requireDatabase } = this.props\n\n        if (requireCommunicator && !this._isCommunicatorInitialized()) {\n            logger.warn(`Client communicator required`)\n            return false\n        }\n\n        if (requireDatabase && !this._isDatabaseInitialized()) {\n            logger.warn(`Database required`)\n            return false\n        }\n\n        return true\n    }\n\n    _isDatabaseInitialized = () => {\n        return !!this.state.database\n    }\n\n    _isCommunicatorInitialized = () => {\n        const { clientCommunicator } = this.state\n        return !!(clientCommunicator && clientCommunicator.provider)\n    }\n\n    handleAuthenticationScreenOpen = () => {\n        this.setState((prevState) => {\n            return {\n                ...prevState,\n                isAuthenticationScreenOpen: true\n            }\n        })\n    }\n\n    handleAuthenticationScreenClose = () => {\n        this.setState((prevState) => {\n            return {\n                ...prevState,\n                isAuthenticationScreenOpen: false\n            }\n        })\n    }\n\n    onAuth = () => {\n        this.setState((prevState) => ({ isAdmin: true }))\n    }\n\n    isEmpty(obj: {}) {\n        return Object.keys(obj).length === 0;\n    }\n\n    getAppStyle = (styleName: string) => {\n        const settings = this.state.widgetOptionsEditor.data.settings\n        const tempSettings = this.state.widgetOptionsTemp\n        const styleValue = !this.isEmpty(tempSettings) ? tempSettings[styleName] : settings[styleName]\n\n        return styleValue || null\n    }\n\n    render() {\n        const {\n            isAdmin,\n            auth,\n            database,\n            clientCommunicator,\n            widgetOptionsEditor,\n            isAuthenticationScreenOpen\n        } = this.state\n        const isServicesReady = this.isServicesReady()\n        const isShowAuthenticationScreen = !isAdmin && process.env.REACT_APP_PIN_CODE && getQueryStringValue()\n        const appMainProps = {\n            clientProvider: clientCommunicator?.provider,\n            widgetOptions: widgetOptionsEditor.data,\n            widgetOptionsTemp: this.state.widgetOptionsTemp,\n            database,\n            auth,\n            isAdmin\n        }\n\n        if (!isServicesReady) {\n            return null\n        }\n\n        return (\n            <div className={styles.app} style={\n                {\n                    fontSize: `${this.getAppStyle('widgetFontSize')}px`\n                }\n            }>\n                <AppContext.Provider value={{\n                    onLocaleChanged: this.onLocaleChanged,\n                }}>\n                    <AppMain\n                        {...appMainProps}\n                    />\n                    {getQueryStringValue() &&\n                        <div\n                            className={styles.edit}\n                        >\n                            <WidgetEditor\n                                path=\"settings\"\n                                isNeedDownloadMedia={this._isNeedDownloadMedia}\n                                widgetOptionsEditor={widgetOptionsEditor}\n                                onMessageForApp={this.onMessageForApp}\n                                onWidgetOptionsUpdated={this.onWidgetOptionsUpdated}\n                                ref={settingsIconRef => this.settingsIconRef = settingsIconRef}\n                                //@ts-ignore\n                                MainComponent={AppMain}\n                                appMainProps={appMainProps}\n                                setWidgetOptionsTemp={this.setWidgetOptionsTemp}\n                                clearWidgetOptionsTemp={this.clearWidgetOptionsTemp}\n                                localeChanged={this.onLocaleChanged}\n                                navButtonsText={{ applyButton: translate('saveSettings'), resetButton: translate('reset') }}\n                                iconsList={{\n                                    download_icon,\n                                    upload_icon,\n                                    audio_icon,\n                                    video_icon,\n                                    delete_icon,\n                                    mixed_content_icon,\n                                    modal_close,\n                                    plus_icon,\n                                    arrow_icon\n                                }}\n\n                                settings={[\n                                    {\n                                        name: translate('settings'),\n                                        fields: [\n                                            {\n                                                label: translate('selectLanguage'),\n                                                name: 'localisation',\n                                                type: 'localisation'\n                                            }, \n                                            {\n                                                name: 'video',\n                                                label: translate('video'),\n                                                type: 'video'\n                                            },\n                                            {\n                                                name: 'video1',\n                                                label: translate('video'),\n                                                type: 'video'\n                                            },\n                                            {\n                                                name: 'naimenovanie1',\n                                                label: 'naimenovanie1',\n                                            },\n                                            {\n                                                name: 'naimenovanie2',\n                                                label: 'naimenovanie2',\n                                            },\n                                            {\n                                                name: 'naimenovanie3',\n                                                label: 'naimenovanie3',\n                                            },\n                                            {\n                                                name: 'naimenovanie4',\n                                                label: 'naimenovanie4',\n                                            },\n                                            {\n                                                name: 'naimenovanie5',\n                                                label: 'naimenovanie5',\n                                            },\n                                            {\n                                                name: 'naimenovanie6',\n                                                label: 'naimenovanie6',\n                                            }\n                                        ]\n                                    },\n                                ]}\n                            >\n                                <img\n                                    src={settingsIcon}\n                                    className={styles.openEditorIcon}\n                                    onClick={(e) => {\n                                        this.settingsIconRef.editStart(e);\n                                    }}\n                                    width={120}\n                                    height={120}\n                                    alt=\"\"\n                                />\n                            </WidgetEditor>\n                        </div>\n                    }\n                </AppContext.Provider>\n            </div>\n        )\n    }\n}\n\ntype AppContextType = {\n    onLocaleChanged: (locale: Localisation) => void\n}\n\nexport const AppContext = React.createContext<AppContextType>({\n    onLocaleChanged: () => {\n\n    }\n})\n\nexport { App }\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'whatwg-fetch'\nimport 'core-js'\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from './app/app';\n\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n    <App\n        requireCommunicator\n    />,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}